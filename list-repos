#!/usr/bin/env ruby

require "octokit"
require "optparse"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: list-repos [options]"

  opts.on("-x", "--e[x]cludes", "Print excluded repos only") do |x|
    options[:excludes] = true
  end
end.parse!

if ENV["GITHUB_ACCESS_TOKEN"] == ""
  raise RuntimeError, "Provide your GitHub token via GITHUB_ACCESS_TOKEN"
end

Octokit.auto_paginate = true
client = Octokit::Client.new(access_token: ENV["GITHUB_ACCESS_TOKEN"])
repos = client.org_repos(ENV["GITHUB_ORG"] || "deis")

WHITELIST_MATCHES = [
  Regexp.new("^boto$"),
  Regexp.new("^builder$"),
  Regexp.new("^charts$"),
  Regexp.new("^clusterator$"),
  Regexp.new("^controller$"),
  Regexp.new("^controller-sdk-go$"),
  Regexp.new("^deisrel$"),
  Regexp.new("^distribution$"),
  Regexp.new("^docker-base$"),
  Regexp.new("^docker-go-dev$"),
  Regexp.new("^docker-shell-dev$"),
  Regexp.new("^dockerbuilder$"),
  Regexp.new("^e2e-runner$"),
  Regexp.new("^fluentd$"),
  Regexp.new("^jenkins$"),
  Regexp.new("^jenkins-jobs$"),
  Regexp.new("^jenkins-node$"),
  Regexp.new("^k8s-claimer$"),
  Regexp.new("^logbomb$"),
  Regexp.new("^logger$"),
  Regexp.new("^minio$"),
  Regexp.new("^monitor$"),
  Regexp.new("^nsq$"),
  Regexp.new("^object-storage-cli$"),
  Regexp.new("^postgres$"),
  Regexp.new("^redis$"),
  Regexp.new("^registry$"),
  Regexp.new("^registry-proxy$"),
  Regexp.new("^registry-token-refresher$"),
  Regexp.new("^router$"),
  Regexp.new("^slack-inviter$"),
  Regexp.new("^slackbox$"),
  Regexp.new("^slugbuilder$"),
  Regexp.new("^slugrunner$"),
  Regexp.new("^syslogparser$"),
  Regexp.new("^wal-e$"),
  Regexp.new("^workflow"),
]

selected, rejected = repos.partition do |repo|
  WHITELIST_MATCHES.any? { |r| r.match repo.name }
end

if options[:excludes]
  puts rejected.map(&:full_name).sort
else
  puts selected.map(&:full_name).sort
end
