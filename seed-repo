#!/usr/bin/env ruby

require 'octokit'

org_repo = ARGV[0]

if org_repo.nil?
  raise RuntimeError, 'Specify the organization/repository as the first argument'
end

org = org_repo.split('/').first
repo = org_repo.split('/').last

LABELS = [
  {:label => 'awaiting review', :color => 'e11d21'},
  {:label => 'bug', :color => 'fc2929'},
  {:label => 'docs', :color => '5319e7'},
  {:label => 'duplicate', :color => 'cccccc'},
  {:label => 'easy fix', :color => 'bfe5bf'},
  {:label => 'enhancement', :color => '84b6eb'},
  {:label => 'flaky test', :color => 'A00CE8'},
  {:label => 'help wanted', :color => '009800'},
  {:label => 'in progress', :color => 'ededed'},
  {:label => 'LGTM1', :color => '009800'},
  {:label => 'LGTM2', :color => 'bfe5bf'},
  {:label => 'needs docs', :color => '5319e7'},
  {:label => 'needs manual testing', :color => 'fbca04'},
  {:label => 'needs rebase', :color => 'f7c6c7'},
  {:label => 'needs tests', :color => '006b75'},
  {:label => 'priority 0', :color => 'e11d21'},
  {:label => 'priority 1', :color => 'e99695'},
  {:label => 'proposal', :color => '0052cc'},
  {:label => 'refactor', :color => 'E31919'},
  {:label => 'revert', :color => 'FF0000'},
  {:label => 'question', :color => 'cc317c'},
  {:label => 'security', :color => 'eb6420'},
  {:label => 'showstopper', :color => 'e11d21'},
  {:label => 'waiting for ci', :color => '009C36'},
  {:label => 'wontfix', :color => 'ffffff'},
  {:label => 'generated only', :color => '58B7D6'},
  {:label => 'upstream issue', :color => 'd4c5f9'}
]

# Specify a concrete timezone so dates parse as expected and
# send dates to GitHub in UTC so we don't get flip/flops for
# milestone dates depending on who happend to `seed-repo` last.
ENV["TZ"] = "America/Denver"

MILESTONES = {
  default: {
    "v2.0-beta1" => {
      state: "closed",
      due_on: Time.parse("March 25, 2016").utc,
    },
    "v2.0-beta2" => {
      state: "closed",
      due_on: Time.parse("April 13, 2016").utc,
    },
    "v2.0-beta3" => {
      state: "closed",
      due_on: Time.parse("April 27, 2016").utc,
    },
    "v2.0-beta4" => {
      state: "closed",
      due_on: Time.parse("May 11, 2016").utc,
    },
    "v2.0-rc1" => {
      state: "closed",
      due_on: Time.parse("May 25, 2016").utc,
    },
    "v2.0-rc2" => {
      state: "closed",
      due_on: Time.parse("June 2, 2016").utc,
    },
    "v2.0" => {
      state: "closed",
      due_on: Time.parse("June 8, 2016").utc,
    },
    "v2.1-pre1" => {
      state: "closed",
      due_on: Time.parse("June 22, 2016").utc,
    },
    "v2.1" => {
      state: "closed",
      due_on: Time.parse("July 6, 2016").utc,
    },
    "v2.2" => {
      state: "closed",
      due_on: Time.parse("July 20, 2016").utc,
    },
    "v2.3" => {
      state: "closed",
      due_on: Time.parse("August 3, 2016").utc,
    },
    "v2.4" => {
      state: "closed",
      due_on: Time.parse("August 17, 2016").utc,
    },
    "v2.5" => {
      state: "closed",
      due_on: Time.parse("September 7, 2016").utc,
    },
    "v2.6" => {
      state: "closed",
      due_on: Time.parse("September 28, 2016").utc,
    },
    "v2.7" => {
      state: "closed",
      due_on: Time.parse("October 12, 2016").utc,
    },
    "v2.8" => {
      state: "closed",
      due_on: Time.parse("October 26, 2016").utc,
    },
    "v2.9" => {
      state: "closed",
      due_on: Time.parse("December 1, 2016").utc,
    },
    "v2.10" => {
      state: "closed",
      due_on: Time.parse("January 5, 2017").utc,
    },
    "v2.11" => {
      state: "closed",
      due_on: Time.parse("February 2, 2017").utc,
    },
    "v2.12" => {
      state: "closed",
      due_on: Time.parse("March 2, 2017").utc,
    },
    "v2.13" => {
      state: "closed",
      due_on: Time.parse("April 6, 2017").utc,
    },
    "v2.14" => {
      state: "closed",
      due_on: Time.parse("May 4, 2017").utc,
    },
    "v2.15" => {
      state: "open",
      due_on: Time.parse("June 1, 2017").utc,
    },
    "v2.16" => {
      state: "open",
      due_on: Time.parse("July 6, 2017").utc,
    },
  }
}

# Careful! The following teams will be given admin privileges for the repo.
TEAMS = [
  '1539687', # bots
  '1295916', # contributing-maintainers
  '1539665', # core-maintainers
]

client = Octokit::Client.new(:access_token => ENV['GITHUB_ACCESS_TOKEN'])

if client.repository?(org_repo)
  puts "Repository '#{org_repo}' exists. Skipping creation..."
else
  puts "Creating repository '#{org_repo}'..."
  client.create_repository(repo, {:organization => org})
end

LABELS.each do |l|
  begin
    client.label(org_repo, l[:label])
  rescue Octokit::NotFound
    puts "Creating label '#{l[:label]}'..."
    client.add_label(org_repo, l[:label], l[:color])
  else
    puts "Label '#{l[:label]}' exists. Skipping creation..."
  end
end

milestone_cache = client.milestones(org_repo, state: "all")
MILESTONES.fetch(org_repo, MILESTONES[:default]).each do |version, data|
  if milestone = milestone_cache.find { |m| m[:title] == version }
    printf "Updating milestone %s/%d => %s %s\n", version, milestone[:number], data[:state], data[:due_on]
    client.update_milestone(org_repo, milestone[:number], title: version, state: data[:state], due_on: data[:due_on])
  else
    printf "Creating milestone %s => %s %s\n", version, data[:state], data[:due_on]
    client.create_milestone(org_repo, version, state: data[:state], due_on: data[:due_on])
  end
end

TEAMS.each do |t|
  puts "Adding #{org_repo} to team #{t}..."
  client.add_team_repository(t, org_repo, {:permission => "admin"})
end
